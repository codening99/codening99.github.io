{"meta":{"title":"CodeningBlog","subtitle":"技术成长记录","description":"梦想成为高手的普通人","author":"无名程序员","url":"https://codening99.github.io","root":"/"},"pages":[{"title":"CodeNing","date":"2022-05-06T03:25:26.000Z","updated":"2022-05-06T03:31:35.570Z","comments":true,"path":"about/index.html","permalink":"https://codening99.github.io/about/index.html","excerpt":"","text":"关于作者 计算机准研究生 研究方向为 自然语言处理(NLP) 本站主要为了相互学习，提升自己的同时页希望对大家有所帮助，仅此而已 联系方式 博客：http://www.codening.xyz/ 邮箱：&#99;&#111;&#x64;&#x65;&#x6e;&#x69;&#x6e;&#103;&#95;&#x32;&#48;&#x32;&#x32;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;"},{"title":"文章分类","date":"2022-05-05T09:01:42.000Z","updated":"2022-05-05T12:34:00.798Z","comments":false,"path":"categories/index.html","permalink":"https://codening99.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-05-05T12:33:50.000Z","updated":"2022-05-05T12:34:11.226Z","comments":true,"path":"tags/index.html","permalink":"https://codening99.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"常用工具","slug":"常用工具","date":"2022-05-06T06:05:55.000Z","updated":"2022-05-06T06:29:37.303Z","comments":true,"path":"2022/05/06/常用工具/","link":"","permalink":"https://codening99.github.io/2022/05/06/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/","excerpt":"1.一言语句接口#简介 动漫也好、小说也好、网络也好，不论在哪里，我们总会看到有那么一两个句子能穿透你的心。我们把这些句子汇聚起来，形成一言网络，以传递更多的感动。如果可以，我们希望我们没有停止服务的那一天。 简单来说，一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。 或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。 相关链接: 一言 2.maven仓库相关链接: mvnrepository 3.OI WIKI#简介","text":"1.一言语句接口#简介 动漫也好、小说也好、网络也好，不论在哪里，我们总会看到有那么一两个句子能穿透你的心。我们把这些句子汇聚起来，形成一言网络，以传递更多的感动。如果可以，我们希望我们没有停止服务的那一天。 简单来说，一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。 或是感动，或是开心，有或是单纯的回忆。来到这里，留下你所喜欢的那一句句话，与大家分享，这就是一言存在的目的。 相关链接: 一言 2.maven仓库相关链接: mvnrepository 3.OI WIKI#简介 OI（Olympiad in Informatics，信息学奥林匹克竞赛）在中国起源于 1984 年，是五大高中学科竞赛之一。 ICPC（International Collegiate Programming Contest，国际大学生程序设计竞赛）由 ICPC 基金会（ICPC Foundation）举办，是最具影响力的大学生计算机竞赛。由于以前 ACM 赞助这个竞赛，也有很多人习惯叫它 ACM 竞赛。 OI Wiki 致力于成为一个免费开放且持续更新的 编程竞赛（competitive programming） 知识整合站点，大家可以在这里获取与竞赛相关的、有趣又实用的知识。我们为大家准备了竞赛中的基础知识、常见题型、解题思路以及常用工具等内容，帮助大家更快速深入地学习编程竞赛中涉及到的知识。 相关链接: OI WIKI 4.seo综合查询#简介 seo综合查询可以查到该网站在各大搜索引擎的信息,包括网站权重,预估流量,收录,反链及关键词排名等。 相关链接: [seo]](https://seo.chinaz.com/)","categories":[{"name":"tool","slug":"tool","permalink":"https://codening99.github.io/categories/tool/"}],"tags":[{"name":"tool","slug":"tool","permalink":"https://codening99.github.io/tags/tool/"}]},{"title":"Hexo美化","slug":"Hexo美化","date":"2022-05-06T05:40:13.000Z","updated":"2022-05-06T06:34:09.515Z","comments":true,"path":"2022/05/06/Hexo美化/","link":"","permalink":"https://codening99.github.io/2022/05/06/Hexo%E7%BE%8E%E5%8C%96/","excerpt":"1.添加站内搜索功能设置的方法如下： 首先安装依赖： 1$ cnpm install hexo-generator-searchdb 站点配置文件的配置 (在该文件的末尾加上以下代码)： 12345search: path: search.xml field: post format: html limit: 10000 主题配置文件的配置 (按照以下所示配置即可)： 12345678910111213141516# Local Search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: true# Swiftype Search API Keyswiftype_key: 然后我们就可以在菜单栏看到一个搜索按钮，点击就可以进行对你的博客内容进行搜索","text":"1.添加站内搜索功能设置的方法如下： 首先安装依赖： 1$ cnpm install hexo-generator-searchdb 站点配置文件的配置 (在该文件的末尾加上以下代码)： 12345search: path: search.xml field: post format: html limit: 10000 主题配置文件的配置 (按照以下所示配置即可)： 12345678910111213141516# Local Search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: true# Swiftype Search API Keyswiftype_key: 然后我们就可以在菜单栏看到一个搜索按钮，点击就可以进行对你的博客内容进行搜索 2.爬取豆瓣账号数据我们可以爬取自己的豆瓣账号数据从而可以分享你的书籍和电影具体的使用方法如下： 由于 hexo 没有集成豆瓣功能，所以需要我们下载第三方插件： 1$ cnpm install hexo-douban --save //我们之前在环境搭建的过程中介绍过cnpm镜像源，没有安装的使用npm(速度可能比较慢) 配置，在站点配置文件(注：不是主题配置文件)最后，加入以下代码： 12345678910111213douban: user: 204836163 builtin: false book: title: &#x27;读书&#x27; quote: &#x27;&#x27; movie: title: &#x27;我的电影&#x27; quote: &#x27;&#x27; # game: # title: &#x27;游戏&#x27; # quote: &#x27;&#x27; timeout: 10000 user : 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”” ，其中的”xxxxxx”就是你的个人ID了; builtin : 是否将生成页面的功能嵌入 hexo s 和 hexo g 中，默认是 false; title : 该页面的标题; quote : 写在页面开头的一段话,支持 html 语法; timeout : 爬取数据的超时时间，默认是 10000ms 。 主题配置文件进行添加菜单栏，找到菜单栏选项，然后添加以下两行配置： 12books: /books/ || bookmovies: /movies/ || viedo-camera 使用：我们在上述完成之后，需要执行命令 hexo douban 来爬取自己的豆瓣账号数据 (前提是自己在第二步关联了自己的账户)，然后再使用命令 hexo g -d 生成部署博客 3.不蒜子统计next 主题新版本已经为我们提供了卜算子接口，用于统计站点的访问人数和总访问量，效果如下所示： 由于已经提供了接口，所以配置就很方便，具体的配置就变得很简单，只需要修改 busuanzi 部分： 1234567enable: true #是否开启不蒜子统计功能total_visitors: true #是否统计总访客数total_visitors_icon: user #访客数图标为人像total_views: true #是否同级总访问数total_views_icon: eye #访问数图标为眼睛post_views: true #是否统计文章访问数post_views_icon: eye #访问数图标为眼睛 相关链接 卜蒜子 4.设置文章置顶Hexo Next主题中，首页文章默认排序方式是按照时间逆序来排的，越新的文章排在越前面。当我们想让访客一进来就能看到推荐的文章时，可以将这些文章置顶。 安装插件 12cnpm uninstall hexo-generator-index --savecnpm install hexo-generator-index-pin-top --save 设置文章置顶 在需要置顶的文章的 Front-matter 中加上top: true即可，比如： 添加置顶图标 打开 /blog/themes/hexo-theme-next/layout/_macro 目录下的 post.swig 文件，在&lt;div class=&quot;post-meta&quot;&gt;标签中插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; 重新生成部署，效果如下：","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://codening99.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://codening99.github.io/tags/Hexo/"}]},{"title":"python基础语法","slug":"python基础语法","date":"2022-05-05T12:40:44.000Z","updated":"2022-05-05T13:24:38.655Z","comments":true,"path":"2022/05/05/python基础语法/","link":"","permalink":"https://codening99.github.io/2022/05/05/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","excerpt":"一、数据类型​ print(id(_obj))：输出地址 ​ print(type(_obj))：输出类型 1.整数类型int 不同进制： ​ 十进制：默认进制 ​ 二进制：以0b开头 ​ 八进制：以0o开头 ​ 十六进制：以0x开头 2.浮点类型float 使用浮点数进行计算时，可能会出现小数位数不确定的情况(个别情况) 如下图： 解决办法：导入模块decimal 1234#导入模块decimalfrom decimal import Decimalprint(Decimal(&#x27;3.2&#x27;) + Decimal(&#x27;1.1&#x27;))#输出结果为4.3","text":"一、数据类型​ print(id(_obj))：输出地址 ​ print(type(_obj))：输出类型 1.整数类型int 不同进制： ​ 十进制：默认进制 ​ 二进制：以0b开头 ​ 八进制：以0o开头 ​ 十六进制：以0x开头 2.浮点类型float 使用浮点数进行计算时，可能会出现小数位数不确定的情况(个别情况) 如下图： 解决办法：导入模块decimal 1234#导入模块decimalfrom decimal import Decimalprint(Decimal(&#x27;3.2&#x27;) + Decimal(&#x27;1.1&#x27;))#输出结果为4.3 3.布尔类型bool 布尔值可以转化为整数(与其他语言不同) ​ Ture-&gt;1 False-&gt;0 ​ 12print(True + False)#输出为1 3.字符串类型str 字符串类型称为不可变的字符序列 可以使用单引号’ ‘、双引号” “、三引号’’’ ‘’’或””” “””来定义 ​ 单引号和双引号定义的字符串必须在一行 ​ 三引号定义的字符串可以分布在连续的多行 ​ 1234567891011121314151617181920212223#单引号str1 = &#x27;人生苦短，我用python&#x27;print(str1, type(str1))#双引号str2 = &quot;人生苦短，我用python&quot;print(str2, type(str2))#双引号的三引号str3 = &quot;&quot;&quot;人生苦短，我用python&quot;&quot;&quot;print(str3, type(str3))#单引号的三引号str4 = &#x27;&#x27;&#x27;人生苦短，我用python&#x27;&#x27;&#x27;print(str4, type(str4))#prtin:#人生苦短，我用python &lt;class &#x27;str&#x27;&gt;#人生苦短，我用python &lt;class &#x27;str&#x27;&gt;#人生苦短，我用python &lt;class &#x27;str&#x27;&gt;#人生苦短，我用python &lt;class &#x27;str&#x27;&gt; 4.数据类型转换 目的：为了将不同数据类型的数据拼接在一起 12345678name = &#x27;张三&#x27;age = 12#不进行转化print(&#x27;我是&#x27; + name + &#x27;今年&#x27; + age + &#x27;岁&#x27;)#出现错误 TypeError: can only concatenate str (not &quot;int&quot;) to str#进行转换print(&#x27;我是&#x27; + name + &#x27;今年&#x27; + (str)age + &#x27;岁&#x27;) #将int类型通过str()转化为string类型 二、注释 1.单行注释：# 2.多行注释：python中没有单独的多行注释标记，将一对三引号之间的代码称为三行注释 1234&quot;&quot;&quot;我就是多行注释&quot;&quot;&quot; 3.中文编码声明格式：在文件开头加上中文声明注释，用以指定源码文件的编码格式 12#coding:gbk#python3以后默认编码为utf-8 三、输入函数Input 1.作用：接受来自用户的输入 2.返回值类型：str 3.值的存储：使用赋值符号&#x3D;对输入的值进行存储 1in = input(&#x27;请输入&#x27;) 4.练习：输入两个整数，输出整数之和 123a = input()b = input()print(int(a) + int(b)) 四、python中的运算符1.算数运算符 示例：加法、减法、乘法、除法、整除、取余、幂运算 1234567891011121314151617print(1 + 2) #加法运算print(1 - 2) #减法运算print(1 * 2) #乘法运算print(1 / 2) #除法运算print(1 // 2) #整除运算print(11 % 2) #取余运算print(2 ** 2) #幂运算&quot;&quot;&quot;Prtin:3-120.514&quot;&quot;&quot; 整除和取余时遇到一正一负的情况： ①整除：向下取整 1234print(9 // 4) #2print(-9 // -4) #2print(-9 // 4) #-3print(9 // -4) #-3 ②取余：遵循公式 余数&#x3D;被除数-除数*商 12print(9 % -4) #根据公式 余数=9-(-4)*(-3)=-3print(-9 % 4) #根据公式 余数=(-9)-4*(-3)=3 2.赋值运算符 ①执行顺序：右→左 ②支持链式赋值：但是只开辟一个内存空间，让所有变量指向这个内存空间 123a = b = 100print(a, b) #100 100print(id(a), id(b)) #2217633582416 2217633582416 指向的地址相同 ③支持参数赋值：+&#x3D;、-&#x3D;、&#x3D;、&#x2F;&#x3D;、&#x2F;&#x2F;&#x3D;、%&#x3D;* ④支持系列解包赋值 12a, b, c = 10, 20, 30print(a, b, c) #10 20 30 12345#交换两个变量的值a = 20b = 30a, b = b, aprint(a, b) #30 20 3.比较运算符 具体包括&gt; 、&lt;、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D; &#x3D;&#x3D;：比较的是value、比较对象的标识是 is 12345list1 = [11, 22, 33]list2 = [11, 22, 33]print(list1 == list2) # True 比较valueprint(list1 is list2) # False 比较idprint(list1 is not list2) # True list1的id和list2的id是不相等的 4.布尔运算符 and、or、not 1234a, b = 1, 2print(a == 1 and b == 2)print(a != 1 or b != 2)print(not(a != 1 or b != 2)) in：一个字符串是否在另一个字符串中存在 not in：一个字符串是否不在另一个字符串中存在 12str1 = &quot;hello world&quot;print(&quot;hello&quot; in str1) # True 5.位运算符 **按位与&amp;**：对应数位都是1结果才是1，否则为0 **按位或|**：对应数位都是0结果才是0，否则为1 4：0100 8：1000 12print(4 | 8) # 12print(4 &amp; 8) # 0 左移位：高位溢出、低位补0，向左移动1位相当于乘以2 右移位：高位补0、低位截断，向右移动1位相当于除以2 12print(2 &lt;&lt; 1) # 4print(4 &gt;&gt; 1) # 2 6.运算符的优先级 算术运算 -&gt; 位运算 -&gt; 比较运算符 -&gt; 布尔运算 -&gt; 赋值运算 五、程序的组织结构1.顺序结构2.对象的bool值 python中一切皆对象，可以使用内置函数bool()获取对象的bool值 以下对象的bool值为False： ​ False ​ 数值0 ​ None ​ 空字符串 ​ 空列表 ​ 空元组 ​ 空字典 ​ 空集合 其余对象的bool值均为True 12345678910111213141516171819print(bool(False))print(bool(0))print(bool(None))print(bool(&quot;&quot;))# 空列表print(bool([]))print(bool(list()))# 空元组print(bool(()))print(bool(tuple()))# 空字典print(bool(&#123;&#125;))print(bool(dict()))# 空集合print(bool(set())) 3.选择结构 ①分支结构（单分支结构、双分支结构、多分支结构） 12345678money = 1000out = int(input(&quot;请输入取款金额\\n&quot;))if money &gt;= out: money -= out print(&quot;取款成功，现在余额为:&quot; + str(money))else: print(&quot;余额不足，取款失败!&quot;) ②多分支结构 1234567891011121314score = int(input(&quot;请输入分数\\n&quot;))degree = &quot;&quot;if score &gt;= 90: degree = &quot;A&quot;elif 90 &gt; score &gt;= 80: degree = &quot;B&quot;elif 80 &gt; score &gt;= 70: degree = &quot;C&quot;else: degree = &quot;NO Degree&quot;print(degree) ③条件表达式：对if…else的简写 语法结构：x if 判断条件 else y 运算规则：如果判断条件的bool值为True，条件表达式返回值为x ，否则返回值为y 123num_a = int(input(&quot;请输入第一个整数a:\\n&quot;))num_b = int(input(&quot;请输入第二个整数b:\\n&quot;))print(str(num_a) + &quot;大于等于&quot; + str(num_b) if num_a &gt;= num_b else str(num_a) + &quot;小于&quot; + str(num_b)) 4.pass语句 ①pass语句什么都不会做，只是一个占位符，用在语法上需要语句的地方 ②什么时候使用？ ​ 先搭建语法结构，还没有想好具体代码的时候 ③配合哪些语句使用？ ​ if语句的条件执行体 for-in语句的循环体 定义函数时的函数体 12345money = int(input(&quot;请输入金额:\\n&quot;))if money &gt;= 100: passelse: pass 5.内置函数range() 整数序列不包括stop值 1print(list(range(5))) # list表示列表，用于查看range对象中的整数队列 [0, 1, 2, 3, 4] 6.循环结构 while循环： ​ 语法结构： ​ while 条件表达式: ​ 循环体 12345678# 计算1-100之间的偶数和sumEven = 0i = 1while i &lt;= 100: if not i % 2: sumEven += i i += 1print(&quot;1-100之间的偶数和为:&quot; + str(sumEven)) for-in循环： in表示从字符串、序列等中依次取值，又称为遍历。 for-in遍历的对象必须是可迭代对象。 ​ for-in的语法结构： ​ for 自定义的遍历 in 可迭代对象: ​ 循环体 12345678910# 100-999之间的水仙花数for item in list(range(100, 1000)): temp = item sumDemo = 0 while temp: temp1 = temp % 10 sumDemo += temp1 ** 3 temp = int(temp / 10) if sumDemo == item: print(str(item) + &quot;是一个水仙花数!&quot;) 如果在循环中不需要用到自定义变量，可以将自定义变量写为 “_” 12for _ in range(10): pass 7.流程控制语句 ①流程控制语句break： ​ 用于结束循环结构。 123456789password = input(&quot;请输入密码\\n&quot;)i = 1while password != &quot;123456&quot;: if i == 3: break print(&quot;密码错误，请重新输入!\\n&quot;) password = input(&quot;请输入密码\\n&quot;) i += 1 ②流程控制语句continue： ​ 用于结束当前循环，进入下一循环。 12345# 输出1-50之间所有5的倍数for item in range(1, 51): if item % 5: continue print(item) 8.else语句 123456789for _ in range(3): password = input(&quot;请输入密码:\\n&quot;) if password == &quot;123456&quot;: print(&quot;密码正确\\n&quot;) break else: print(&quot;密码错误\\n&quot;)else: print(&quot;密码三次输入错误，请明天再来尝试！&quot;) 9.嵌套循环 九九乘法表 1234for i in range(1, 10): for j in range(1, i + 1): print(&quot;i * j = &quot; + str(i * j), end=&quot;\\t&quot;) print() 六、列表（相当于数组）1.列表的创建 ①使用中括号 ​ 元素之间使用逗号进行分离 123lst1 = [&quot;hellow&quot;, &quot;world&quot;, 98]for i in lst1: print(i, end=&quot;\\t&quot;) ②使用内置函数list() 123lst2 = list([&quot;hellow&quot;, &quot;world&quot;, 98])for i in lst2: print(i, end=&quot;\\t&quot;) 2.列表的特点 python列表可以逆序查找 123lst1 = [&quot;hello&quot;, &quot;world&quot;, 98]print(lst1[-1]) # 98 3.列表的查询操作 ①获取列表中指定元素的索引 123lst1 = [&quot;hello&quot;, &quot;world&quot;, 98, &quot;hello&quot;]print(lst1.index(&quot;hello&quot;)) # 0 只返回相同元素中第一个元素的索引 在指定的start和stop之间进行查找 ​ index(value, start, stop) 123lst1 = [&quot;hello&quot;, &quot;world&quot;, 98, &quot;hello&quot;]print(lst1.index(&quot;hello&quot;, 1, len(lst1) + 1)) # 3 ②获取列表中指定元素 python列表可以逆序查找 123lst1 = [&quot;hello&quot;, &quot;world&quot;, 98]print(lst1[-1]) # 98 ③获取列表中的多个元素（切片） step为正数 12345678# step默认为1print(list1[0:6]) # [10, 20, 30, 40, 50, 60]# start默认为0print(list1[:5:1]) # [10, 20, 30, 40, 50]# stop默认为len(list1) + 1print(list1[0::1]) # [10, 20, 30, 40, 50, 60, 70, 80, 90] stop为负数 ​ start省略：切片的第一个元素默认是列表的最后一个元素 ​ stop省略：切片的最后一个元素默认是列中的第一个元素 1234567list1 = [10, 20, 30, 40, 50, 60, 70, 80, 90]# start默认是列表的最后一个元素print(list1[:3:-1]) # [90, 80, 70, 60, 50]# stop默认是列表的第一个元素print(list1[3::-1]) # [40, 30, 20, 10] 4.列表元素的增加操作 append()：在列表的末尾添加一个元素 12345list1 = [10, 20, 30]list1.append(100)print(list1) # [10, 20, 30, 100] entend()：在列表的末尾添加至少一个元素 12345678list1 = [10, 20, 30]list2 = [&quot;hello&quot;, &quot;world&quot;]list1.append(list2) # 将list2作为整体添加到list1末尾print(list1) # [10, 20, 30, [&#x27;hello&#x27;, &#x27;world&#x27;]]list1.extend(list2) # 将list2中的每个元素分别放到list1末尾print(list1) # [10, 20, 30, [&#x27;hello&#x27;, &#x27;world&#x27;], &#x27;hello&#x27;, &#x27;world&#x27;] insert（）：在列表的任意位置添加一个元素 1234list1 = [10, 20, 30]list1.insert(1, 90) # 在索引位置为1的位置添加90print(list1) # [10, 90, 20, 30] 切片操作：在任意一个位置上至少添加一个元素，并且替换掉原来的元素 123456list1 = [10, 20, 30]list2 = [&quot;hello&quot;, &quot;world&quot;]# 切片操作：在任意一个位置上至少添加一个元素，并且替换掉原来的元素list1[1:] = list2print(list1) # [10, &#x27;hello&#x27;, &#x27;world&#x27;] 5.列表元素的删除操作 remove()：一次删除一个元素，重复元素只删除第一个 1234list1 = [1, 2, 3, 4, 5, 6, 1]list1.remove(1)print(list1) # [2, 3, 4, 5, 6, 1] pop()：删除一个指定索引位置上的元素，默认删除列表的最后一个元素 1234567list1 = [1, 2, 3, 4, 5, 6, 1]list1.pop(1)print(list1) # [1, 3, 4, 5, 6, 1]list1.pop() print(list1) # [1, 3, 4, 5, 6] 切片：一次至少删除一个元素，将产生一个新的列表对象 1234list1 = [1, 2, 3, 4, 5, 6, 1]list2 = list1[1:4:1]print(list2) # [2, 3, 4] 不产生新的列表对象，而是删除原列表中的元素 1234list1 = [1, 2, 3, 4, 5, 6, 1]list1[1:4] = [] # 使用空列表进行替换选中元素print(list1) # [1, 5, 6, 1] clear()：清楚列表中的所有元素 1234list1 = [1, 2, 3, 4, 5, 6, 1]list1.clear()print(list1) # [] del()：删除列表对象 1234list1 = [1, 2, 3, 4, 5, 6, 1]del list1print(list1) # name &#x27;list1&#x27; is not defined 6.列表元素的修改操作 为指定索引元素赋予一个新值 1234567# 一次修改一个值list1[1] = 100print(list1) # [10, 100, 30, 40]# 一次修改多个值(切片)list1[2:4] = [&quot;hello&quot;, &quot;world&quot;] print(list1) # [10, 100, &#x27;hello&#x27;, &#x27;world&#x27;] 7.列表元素的排序操作 sort()函数 123456789list1 = [24, -23, 41, 2, 11, 42, 99]# sort():默认为升序排列list1.sort()print(list1) # [-23, 2, 11, 24, 41, 42, 99]# sort():修改reverse为True则为降序排列list1.sort(reverse=True)print(list1) # [99, 42, 41, 24, 11, 2, -23] sorted()内置函数 123456list1 = [24, -23, 41, 2, 11, 42, 99]# 使用内置函数sorted()对列表进行排序，将产生一个新的列表对象list2 = sorted(list1)print(list1) # [24, -23, 41, 2, 11, 42, 99]print(list2) # [-23, 2, 11, 24, 41, 42, 99] 8.列表生成式 123list1 = [i for i in range(1, 11)]print(list1) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 七、字典1.字典结构介绍 字典的实现原理 字典是无序的，通过哈希函数查找对应位置。 所以放在字典中的序列必须是一个不可变序列 -&gt; str(不能进行增删改操作) 2.字典的特点 3.字典的创建 **①使用{}创建字典 ** 123scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;print(scores) # &#123;&#x27;张三&#x27;: 100, &#x27;李四&#x27;: 90, &#x27;王五&#x27;: 43&#125; ②使用dict()创建字典 12scores1 = dict(name=&quot;jack&quot;, value=&quot;123&quot;)print(scores1) # &#123;&#x27;name&#x27;: &#x27;jack&#x27;, &#x27;value&#x27;: &#x27;123&#x27;&#125; 4.字典元素的获取 12345678910scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;print(scores.get(&quot;张三&quot;)) # 100print(scores.get(&quot;123&quot;)) # None# get()方法可以设置默认值print(scores.get(&quot;123&quot;, &quot;default value&quot;)) # default value print(scores[&quot;张三&quot;]) # 100print(scores[&quot;123&quot;]) # KeyError: &#x27;123&#x27; 5.字典的删除和新增 ①字典元素的删除 del 12345scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;# 字典元素的删除del scores[&quot;张三&quot;]print(scores) # &#123;&#x27;李四&#x27;: 90, &#x27;王五&#x27;: 43&#125; clear()：清空字典元素 12345scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;# 字典元素的新增scores.clear()print(scores) # &#123;&#125; ②字典元素的新增 12345scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;# 字典元素的新增scores[&quot;陈六&quot;] = 10print(scores) # &#123;&#x27;张三&#x27;: 100, &#x27;李四&#x27;: 90, &#x27;王五&#x27;: 43, &#x27;陈六&#x27;: 10&#125; 6.获取字典视图 1234567scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;print(list(scores.keys())) # 获取所有的key并将其转为列表 [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]print(list(scores.values())) # 获取所有的value并将其转为列表 [100, 90, 43]# 转换之后的列表元素是由元组构成print(list(scores.items())) # 获取所有的key-value对并将其转为列表 [(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 90), (&#x27;王五&#x27;, 43)] 7.字典元素的遍历 遍历输出的是字典的key 123456789scores = &#123;&quot;张三&quot;: 100, &quot;李四&quot;: 90, &quot;王五&quot;: 43&#125;for item in scores: print(item, scores.get(item))&#x27;&#x27;&#x27;张三 100李四 90王五 43&#x27;&#x27;&#x27; 8.字典生成式 12345items = [&quot;fruits&quot;, &quot;books&quot;, &quot;others&quot;]prices = [96, 78, 85]dicts = &#123;keyword: value for keyword, value in zip(items, prices)&#125;print(dicts) # &#123;&#x27;fruits&#x27;: 96, &#x27;books&#x27;: 78, &#x27;others&#x27;: 85&#125; 在进行zip压缩的过程中，会长度较小的迭代对象为基准进行字典生成 123456# 无论key或者value更长，最终生成的字典大小都是以较小的迭代对象为基准items = [&quot;fruits&quot;, &quot;books&quot;, &quot;others&quot;, &quot;default&quot;]prices = [96, 78, 85]dicts = &#123;keyword: value for keyword, value in zip(items, prices)&#125;print(dicts) # &#123;&#x27;fruits&#x27;: 96, &#x27;books&#x27;: 78, &#x27;others&#x27;: 85&#125; 八、元组1.元组结构介绍 元组为不可变序列，注意事项 2.元组的创建 ①使用()创建元组 12tup = (&quot;python&quot;, 12, 40)print(tup) # (&#x27;python&#x27;, 12, 40) ②使用内置函数tuple()创建元组 12tup = tuple((&quot;python&quot;, 12, 40))print(tup) # (&#x27;python&#x27;, 12, 40) ③在创建元组过程中可以省略() 12tup = &quot;python&quot;, 123, 424print(tup) # (&#x27;python&#x27;, 123, 424) 所以若当前元组只包含一个元素，不能够省略逗号 12tup = (&quot;python&quot;,)print(tup) # (&#x27;python&#x27;,)","categories":[{"name":"python","slug":"python","permalink":"https://codening99.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://codening99.github.io/tags/python/"}]},{"title":"Hexo如何写文章","slug":"Hexo如何新建文章","date":"2022-05-05T02:50:53.000Z","updated":"2022-05-05T09:04:46.924Z","comments":true,"path":"2022/05/05/Hexo如何新建文章/","link":"","permalink":"https://codening99.github.io/2022/05/05/Hexo%E5%A6%82%E4%BD%95%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/","excerpt":"Hexo文章管理1.创建一个md文件md文件也就是Markdown文件，通过以下命令来创建： 12$ hexo new &lt;title&gt;$ hexo new &quot;我的第一篇文章&quot; 2.布局（layout） 创建md文件时，我们可以指定布局 12$ hexo new [layout] &lt;title&gt;$ hexo new page &quot;我的页面&quot; 布局有三种：post（文章）、draft（草稿）、page（页面） 在新建文件时，Hexo 会根据 scaffolds 文件夹内相对应的文件（可以理解为模板）来建立md文件：","text":"Hexo文章管理1.创建一个md文件md文件也就是Markdown文件，通过以下命令来创建： 12$ hexo new &lt;title&gt;$ hexo new &quot;我的第一篇文章&quot; 2.布局（layout） 创建md文件时，我们可以指定布局 12$ hexo new [layout] &lt;title&gt;$ hexo new page &quot;我的页面&quot; 布局有三种：post（文章）、draft（草稿）、page（页面） 在新建文件时，Hexo 会根据 scaffolds 文件夹内相对应的文件（可以理解为模板）来建立md文件： 如果没有指定布局类型，则为默认布局post，可以在站点配置文件修改 default_layout 参数来修改默认布局。 当我们创建不同布局的md文件时，它们会存储在不同路径： 对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件，页面布局顾名思义就是用来DIY我们博客页面的。 3.草稿（draft）draft这种布局在建立时会被保存到 source/_drafts 文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到_drafts文件夹中。 我们可在启动服务器时加上 --draft 参数来查看草稿。 1$ hexo server --draft 还可以在站点配置文件中把 render_drafts 参数设为 true 来预览草稿。 我们可以通过 publish 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。 1$ hexo publish [layout] &lt;title&gt; 4.Front-matter当我们创建一个md文件后，打开后会看到一些内容，这些称为Front-matter，它是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 1234---title: Hello World # 标题就是我们上面创建的时候指定的名字date: 2013/7/13 20:46:25 # 文件创建的时间--- 在Typora中我们在md文件的首行（必须是第一行）输入--- ，然后按回车就可以插入Front-matter了。 Front-matter预定义参数 123456789layout 布局 默认为true，如果你不想你的文章被处理，可以设置为falsetitle 标题 标题会显示在最上方居中位置 date 建立日期 如果不指定则为默认值-文件创建日期，可以自定义。update 更新日期 如果不指定则为默认值-文件修改后重新生成静态文件的日期。comments 是否开启文章的评论功能 默认值为truetags 标签（不适用于页面page布局）categoreies 分类（不适用于页面page布局）permalink 覆盖文章网址keywords 仅用于 meta 标签和 Open Graph 的关键词（不推荐使用） 为文章添加分类与标签只有文章（post布局）支持分类和标签，需要在Front-matter中设置。分类有层级关系，标签没有。 举个例子：1）下面文章它的标签是：Hexo、博客2）分类是： 个人博客 &gt; Hexo博客3）“Hexo博客” 是 “个人博客” 的子分类 123456categories:- 个人博客（第一层级）- Hexo博客（第二层级）tags:- Hexo- 博客 为文章添加多个分类1）下面文章属于三个分类：日常 &gt; 生活，日常 &gt; 随想，日记2）其中生活、随想为日常的子分类，日常和日记为同级分类 1234categories:- [日常, 生活]- [日常, 随想]- [日记] 基本操作常用命令 清除缓存：hexo clean 生成静态文件：hexo generate可简写为 hexo g 启动服务器：hexo server或者 hexo s 常用参数：-p（--port）重设端口 部署：hexo deploy可简写为hexo d，用于将网站部署到服务器上。（暂时用不到，目前都是在本地，后面我们将博客托管到GitHub Pages或Gitee Pages时才会用到此命令）常用参数：-g（--generate），hexo d -g部署前预先生成静态文件，等同于 hexo g -d 一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。 123// 我们可以写成一条命令$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s$ hexo d 更多细节请查看：Hexo官方文档","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://codening99.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://codening99.github.io/tags/Hexo/"}]}],"categories":[{"name":"tool","slug":"tool","permalink":"https://codening99.github.io/categories/tool/"},{"name":"Hexo","slug":"Hexo","permalink":"https://codening99.github.io/categories/Hexo/"},{"name":"python","slug":"python","permalink":"https://codening99.github.io/categories/python/"}],"tags":[{"name":"tool","slug":"tool","permalink":"https://codening99.github.io/tags/tool/"},{"name":"Hexo","slug":"Hexo","permalink":"https://codening99.github.io/tags/Hexo/"},{"name":"python","slug":"python","permalink":"https://codening99.github.io/tags/python/"}]}